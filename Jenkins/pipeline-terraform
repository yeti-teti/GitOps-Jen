properties([
    parameters([
        string(
            defaultValue: 'dev',
            name: 'Environment'
        ),
        string(
            defaultValue: 'exalted-crane-459000-g5',
            name: 'GCP_PROJECT_ID',
            description: 'The GCP Project ID to deploy resources to'
        ),
        choice(
            choices: ['plan', 'apply', 'destroy'],
            name: 'Terraform_Action'
        )
    ])
])
pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-credentials-id', url: 'https://github.com/yeti-teti/GitOps-Jen.git'
            }
        }

        stage('Install Terraform') {
            steps {
                sh '''
                    if ! [ -x "$(command -v terraform)" ]; then
                        echo "Terraform not found, installing..."
                        wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
                        unzip terraform_1.5.0_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                        terraform --version
                    else
                        echo "Terraform already installed: $(terraform --version)"
                    fi
                '''
            }
        }

        stage('Initialize Terraform') {
            steps {
                dir('Terraform/dev') { // Ensure you are in the correct directory where your .tf files are
                    withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCP_SA_KEY_PATH')]) {
                        sh '''
                            export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SA_KEY_PATH}"
                            echo "Initializing Terraform in $(pwd)"
                            terraform init -input=false
                        '''
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.Terraform_Action == 'plan' }
            }
            steps {
                dir('Terraform/dev') {
                    withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCP_SA_KEY_PATH')]) {
                        sh '''
                            export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SA_KEY_PATH}"
                            terraform plan -out=terraform.tfplan -input=false -var="project_id=${params.GCP_PROJECT_ID}"
                        '''
                    }
                }
            }
        }

        stage('Apply Terraform') {
            when {
                expression { params.Terraform_Action == 'apply' }
            }
            steps {
                dir('Terraform/dev') {
                    withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCP_SA_KEY_PATH')]) {
                        sh '''
                            export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SA_KEY_PATH}"
                            terraform apply -auto-approve -input=false -var="project_id=${params.GCP_PROJECT_ID}"
                        '''
                    }
                }
            }
        }

        stage('Destroy Terraform') {
            when {
                expression { params.Terraform_Action == 'destroy' }
            }
            steps {
                dir('Terraform/dev') {
                    withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCP_SA_KEY_PATH')]) {
                        sh '''
                            export GOOGLE_APPLICATION_CREDENTIALS="${GCP_SA_KEY_PATH}"
                            terraform destroy -auto-approve -input=false -var="project_id=${params.GCP_PROJECT_ID}"
                        '''
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
