properties([
    parameters([
        string(
            defaultValue: 'dev',
            name: 'Environment'
        ),
        string(
            defaultValue: 'exalted-crane-459000-g5',
            name: 'GCP_PROJECT_ID',
            description: 'The GCP Project ID to deploy resources to'
        ),
        choice(
            choices: ['plan', 'apply', 'destroy'],
            name: 'Terraform_Action'
        )
    ])
])
pipeline {
    agent any

    environment {
        GOOGLE_APPLICATION_CREDENTIALS = "${env.WORKSPACE}/gcp-service-account-json.json"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', credentialsId: 'github-credentials-id', url: 'https://github.com/yeti-teti/GitOps-Jen.git'

                dir('Terraform/dev'){
                    echo "Changed Dir: ${pwd()}"
                }
            }
        }

        stage('Install Terraform') {
            steps {
                sh '''
                    if ! [ -x "$(command -v terraform)" ]; then
                        wget https://releases.hashicorp.com/terraform/1.5.0/terraform_1.5.0_linux_amd64.zip
                        unzip terraform_1.5.0_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                    fi
                '''
            }
        }

        stage('Initialize Terraform') {
            steps {
                dir('Terraform/dev') {
                    script {
                        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh '''
                                export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
                                terraform init

                                # Check if the service account is already in the state (example)
                                if ! terraform state list | grep "google_service_account.terraform-pyramid"; then
                                    terraform import google_service_account.terraform-pyramid projects/...
                                fi

                                # Check if the network is already in the state (example)
                                if ! terraform state list | grep "google_compute_network.this"; then
                                    terraform import google_compute_network.this projects/...
                                fi
                            '''
                        }
                    }
                }
            }
        }

        stage('Terraform Plan') {
            when {
                expression { params.Terraform_Action == 'plan' }
            }
            steps {
                dir('Terraform/dev') {
                    script {
                        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh '''
                                export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
                                terraform plan -out=terraform.tfplan
                            '''
                        }
                    }
                }
            }
        }

        stage('Apply Terraform') {
            when {
                expression { params.Terraform_Action == 'apply' }
            }
            steps {
                dir('Terraform/dev') {
                    script {
                        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh '''
                                export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
                                terraform apply -auto-approve
                            '''
                        }
                    }
                }
            }
        }

        stage('Destroy Terraform') {
            when {
                expression { params.Terraform_Action == 'destroy' }
            }
            steps {
                dir('Terraform/dev') {
                    script {
                        withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GOOGLE_APPLICATION_CREDENTIALS')]) {
                            sh '''
                                export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
                                terraform destroy -auto-approve
                            '''
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}
