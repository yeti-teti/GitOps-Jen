pipeline {
    agent any
    tools {
        python 'python'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        GCP_ACCOUNT_ID = credentials('gcp-account-id')
        GCP_GAR_REPO_NAME = credentials('backend-repo')
        GCP_DEFAULT_REGION = 'us-central1'
        REPOSITORY_URI = "${GCP_DEFAULT_REGION}-docker.pkg.dev/${GCP_ACCOUNT_ID}/${GCP_GAR_REPO_NAME}"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'github-credentials-id', url: 'https://github.com/yeti-teti/Caesarion'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('api') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=backend\
                            -Dsonar.projectKey=backend\
                            -Dsonar.sources=.'''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'sonarQube-sk'
                }
            }
        }
        stage('OWASP Dependency-Check Scan') {
            steps {
                dir('api') {
                    dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                    dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
                }
            }
        }
        stage('Trivy File Scan') {
            steps {
                dir('api') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
        stage("Docker Image Build") {
            steps {
                script {
                    dir('api') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh 'docker build -t ${REPOSITORY_URI}/${GCP_GAR_REPO_NAME}:${BUILD_NUMBER} .'
                    }
                }
            }
        }
        stage("GAR Image Pushing") {
            steps {
                script {
                    sh 'gcloud auth configure-docker ${GCP_DEFAULT_REGION}-docker.pkg.dev'
                    sh 'docker push ${REPOSITORY_URI}/${GCP_GAR_REPO_NAME}:${BUILD_NUMBER}'
                }
            }
        }
        stage("TRIVY Image Scan") {
            steps {
                sh 'trivy image ${REPOSITORY_URI}/${GCP_GAR_REPO_NAME}:${BUILD_NUMBER} > trivyimage.txt'
            }
        }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Caesarion"
                GIT_USER_NAME = "yeti-teti"
            }
            steps {
                dir('k8s/Backend') {
                    withCredentials([string(credentialsId: 'github-credentials-id', variable: 'GITHUB_TOKEN')]) {
                        sh '''
                            git config user.email "yetit1762@gmail.com"
                            git config user.name "yeti-teti"
                            BUILD_NUMBER=${BUILD_NUMBER}
                            echo $BUILD_NUMBER
                            imageTag=$(grep -oP '(?<=backend:)[^ ]+' deployment.yaml)
                            echo $imageTag
                            sed -i "s|${GCP_GAR_REPO_NAME}:${imageTag}|${REPOSITORY_URI}/${GCP_GAR_REPO_NAME}:${BUILD_NUMBER}|" deployment.yaml
                            git add deployment.yaml
                            git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                            git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} HEAD:main
                        '''
                    }
                }
            }
        }
    }
}
