pipeline {
    agent any
    // tools {
    //     // python 'python'
    // }
    parameters {
        string(name: 'GCP_PROJECT_ID', defaultValue: 'exalted-crane-459000-g5', description: 'GCP Project ID')
        string(name: 'GAR_REPO_NAME', defaultValue: 'backend', description: 'Google Artifact Registry Repository Name')
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        GCP_ACCOUNT_ID = "${params.GCP_PROJECT_ID}"
        GCP_GAR_REPO_NAME = "${params.GAR_REPO_NAME}"
        GCP_DEFAULT_REGION = 'us-central1'
        // REPOSITORY_URI = "${GCP_DEFAULT_REGION}-docker.pkg.dev/${GCP_ACCOUNT_ID}/${GCP_GAR_REPO_NAME}"
    }
    stages {
        stage('Cleaning Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Checkout from Git') {
            steps {
                git branch: 'main', credentialsId: 'github-credentials-id', url: 'https://github.com/yeti-teti/Caesarion'
            }
        }
        stage('Sonarqube Analysis') {
            steps {
                dir('api') {
                    withSonarQubeEnv('sonar-server') {
                        sh ''' $SCANNER_HOME/bin/sonar-scanner \
                            -Dsonar.projectName=backend\
                            -Dsonar.projectKey=backend\
                            -Dsonar.sources=.'''
                    }
                }
            }
        }
        stage('Quality Check') {
            steps {
                script {
                    try {
                        def qg = waitForQualityGate abortPipeline: false, credentialsId: 'sonarQube-sk'
                        if (qg.status != 'OK') {
                            echo "Quality Gate failed: ${qg.status}"
                            echo "Quality Gate URL: ${qg.dashboardUrl}"
                            echo "Pipeline will continue despite quality gate failure."
                        } else {
                            echo "Quality Gate passed: ${qg.status}"
                        }
                    } catch (Exception e) {
                        echo "Quality Gate check failed with exception: ${e.getMessage()}"
                        echo "This might be due to webhook configuration issues."
                        echo "SonarQube analysis was successful, check the dashboard manually: http://34.71.79.32:9000/dashboard?id=backend"
                        echo "Pipeline will continue..."
                    }
                }
            }
        }
        // stage('OWASP Dependency-Check Scan') {
        //     steps {
        //         dir('api') {
        //             dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
        //             dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
        //         }
        //     }
        // }
        stage('Trivy File Scan') {
            steps {
                dir('api') {
                    sh 'trivy fs . > trivyfs.txt'
                }
            }
        }
                stage("Docker Image Build") {
            steps {
                script {
                    dir('api') {
                        sh 'docker system prune -f'
                        sh 'docker container prune -f'
                        sh '''
                            REPOSITORY_URI="${GCP_DEFAULT_REGION}-docker.pkg.dev/${GCP_ACCOUNT_ID}/${GCP_GAR_REPO_NAME}/backend-api"
                            echo "Building image with tag: ${REPOSITORY_URI}:${BUILD_NUMBER}"
                            docker build -t "${REPOSITORY_URI}:${BUILD_NUMBER}" .
                        '''
                    }
                }
            }
        }
        stage("GAR Image Pushing") {
            steps {
                script {
                    withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCP_SA_KEY')]) {
                        sh '''
                            REPOSITORY_URI="${GCP_DEFAULT_REGION}-docker.pkg.dev/${GCP_ACCOUNT_ID}/${GCP_GAR_REPO_NAME}/backend-api"
                            echo "Authenticating with GCP using service account..."
                            gcloud auth activate-service-account --key-file="${GCP_SA_KEY}"
                            echo "Configuring docker for GAR..."
                            gcloud auth configure-docker "${GCP_DEFAULT_REGION}-docker.pkg.dev" --quiet
                            echo "Pushing image: ${REPOSITORY_URI}:${BUILD_NUMBER}"
                            docker push "${REPOSITORY_URI}:${BUILD_NUMBER}"
                        '''
                    }
                }
            }
        }
        // stage("TRIVY Image Scan") {
        //     steps {
        //         script {
        //             withCredentials([file(credentialsId: 'gcp-service-account-json', variable: 'GCP_SA_KEY')]) {
        //                 sh '''
        //                     REPOSITORY_URI="${GCP_DEFAULT_REGION}-docker.pkg.dev/${GCP_ACCOUNT_ID}/${GCP_GAR_REPO_NAME}/backend-api"
        //                     echo "Authenticating with GCP using service account..."
        //                     gcloud auth activate-service-account --key-file="${GCP_SA_KEY}"
        //                     gcloud auth configure-docker "${GCP_DEFAULT_REGION}-docker.pkg.dev" --quiet
        //                     echo "Scanning image: ${REPOSITORY_URI}:${BUILD_NUMBER}"
        //                     trivy image "${REPOSITORY_URI}:${BUILD_NUMBER}" > trivyimage.txt
        //                 '''
        //             }
        //         }
        //     }
        // }
        stage('Update Deployment file') {
            environment {
                GIT_REPO_NAME = "Caesarion"
                GIT_USER_NAME = "yeti-teti"
            }
            steps {
                script {
                    dir('k8s/backend') {
                        withCredentials([usernamePassword(credentialsId: 'github-credentials-id', usernameVariable: 'GIT_USERNAME', passwordVariable: 'GITHUB_TOKEN')]) {
                            sh '''
                                REPOSITORY_URI="${GCP_DEFAULT_REGION}-docker.pkg.dev/${GCP_ACCOUNT_ID}/${GCP_GAR_REPO_NAME}/backend-api"
                                git config user.email "yetit1762@gmail.com"
                                git config user.name "yeti-teti"
                                echo "Build number: ${BUILD_NUMBER}"
                                echo "Repository URI: ${REPOSITORY_URI}"
                                imageTag=$(grep -oP '(?<=backend-api:)[^ ]+' deployment.yaml)
                                echo "Current image tag: $imageTag"
                                sed -i "s|${GCP_GAR_REPO_NAME}/backend-api:${imageTag}|${REPOSITORY_URI}:${BUILD_NUMBER}|" deployment.yaml
                                git add deployment.yaml
                                git commit -m "Update deployment Image to version ${BUILD_NUMBER}"
                                git push "https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME}" HEAD:main
                            '''
                        }
                    }
                }
            }
        }
    }
}
